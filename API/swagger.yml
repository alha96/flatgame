swagger: '2.0'
info:
  description: A web app to better organize a shared flat!
  version: 0.2.0
  title: Flatgame
host: arkas.alnima.uberspace.de
basePath: /
paths:
  /user:
    get:
      description: "Search for a user by username"
      parameters:
      - in: "query"
        name: "username"
        type: "string"
        required: true
        description: "The username"
      responses:
        200:
          description: "Found following users"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/User'
        400:
          description: "No username given"
        404:
          description: "No user found"
    post:
      description: "Add a new user"
      #id, profile_image, flat and points is not supplied in the body by the client
      parameters:
      - in: "body"
        name: "body"
        description: "Data of the user"
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: "User created"
          schema:
            $ref: '#/definitions/User'
        400:
          description: "No username given"
        409:
          description: "User already exists"
          #if username is not unique, the user cannot exist
  /user/{userid}:
    get:
      description: "Search for a user by ID"
      parameters:
      - in: "path"
        name: "userid"
        type: "string"
        required: true
        description: "The ID of the user"
      responses:
        200:
          description: "User found"
          schema:
            $ref: '#/definitions/User'
        400:
          description: "No username given"
        404:
          description: "User not found"
    put:
      description: "Update a user by ID"
      parameters:
      - in: "path"
        name: "userid"
        type: "string"
        required: true
        description: "The user ID"
      - in: "body"
        name: "body"
        description: "Contains all attributes to update. If an attribute is missing, it will not be changed."
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: "User updated"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
    delete:
      description: "Delete a user by ID"
      parameters:
      - in: "path"
        name: "userid"
        type: "string"
        required: true
        description: "The user ID"
      responses:
        200:
          description: "User deleted"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
  /flat:
    post:
      # does this mean that angular could send multiple requests with different snippets and the backend would put all of them together? (1st: send name, 2nd: send members, 3rd: send tasks, 4th: send more tasks)
      #is this endpoint used to e.g. add one task?
      #what is the flat description?
      description: "Create a new flat"
      parameters:
      - in: "body"
        name: "body"
        description: "Contains all attributes of the flat. If an attribute is missing, it will not be changed."
        schema:
          $ref: '#/definitions/Flat'
      responses:
        200:
          description: "Flat created"
          schema:
            $ref: '#/definitions/Flat'
        400:
          description: "Bad request"
  /flat/{flatid}:
    get:
      description: "Search for a flat by ID"
      parameters:
      - in: "path"
        name: "flatid"
        type: "string"
        required: true
        description: "The ID of the flat"
      responses:
        200:
          description: "Flat found"
          schema:
            $ref: '#/definitions/Flat'
        404:
          description: "Flat not found"
    put:
      description: "Update an existing flat by ID"
      parameters:
      - in: "path"
        name: "flatid"
        type: "string"
        required: true
        description: "The ID of the flat"
      - in: "body"
        name: "body"
        required: true
        description: "Contains all attributes of the flat to update. If an attribute is missing, it will not be changed."
        schema:
          $ref: '#/definitions/Flat'
      responses:
        200:
          description: "Flat updated"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
    delete:
      description: "Delete a flat by ID"
      #important: also delete flat reference from all users in given flat
      parameters:
      - in: "path"
        name: "flatid"
        type: "string"
        required: true
        description: "The ID of the flat"
      responses:
        200:
          description: "Flat deleted"
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
  /flat/{flatid}/task:
    get:
      description: "Get all task logs related to the flat"
      parameters:
      - in: "path"
        name: "flatid"
        type: "string"
        required: true
        description: "The ID of the flat"
      - in: "query"
        name: "taskid"
        type: "string"
        required: false
        description: "Limit the results to a specific taskid"
      - in: "query"
        name: "skip"
        type: "number"
        required: false
        description: "Used for pagination"
      - in: "query"
        name: "limit"
        type: "number"
        required: false
        description: "Used for pagination"
      responses:
        200:
          description: "Tasks found"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/TaskInfo'
        401:
          description: "Unauthorized"
  /flat/{flatid}/user:
    get:
      description: "Get all users of flat"
      parameters:
      - in: "path"
        name: "flatid"
        type: "string"
        required: true
        description: "The ID of the flat"
      responses:
        200:
          description: "Found all users of flat"
        401:
          description: "Unauthorized"
        404:
          description: "Flat does not exist"
  /flat/{flatid}/user/{userid}:
    put:
      description: "Add or change user in flat"
      parameters:
      - in: "path"
        name: "flatid"
        type: "string"
        required: true
        description: "The ID of the flat"
      - in: "path"
        name: "userid"
        type: "string"
        required: true
        description: "The ID of the user"
      - in: "body"
        name: "isAdmin"
        description: "Data of the user"
        required: false
        schema:
          $ref: "#/definitions/UserInFlat"
      responses:
        200:
          description: "Added/Changed user successfully"
        401:
          description: "Unauthorized"
    delete:
      description: "Delete user in flat"
      parameters:
      - in: "path"
        name: "flatid"
        type: "string"
        required: true
        description: "The ID of the flat"
      - in: "path"
        name: "userid"
        type: "string"
        required: true
        description: "The ID of the user"
      responses:
        200:
          description: "Deleted user"
        401:
          description: "Unauthorized"
  /flat/{flatid}/task/{taskid}:
    post:
      description: "Set a task as done"
      parameters:
      - in: "path"
        name: "flatid"
        type: "string"
        required: true
        description: "The id of the flat"
      - in: "path"
        name: "taskid"
        type: "string"
        required: true
        description: "The id of the task"
      - in: "body"
        name: "user"
        required: false
        description: "Specify which user has done the task (Admin permissions required) If not set the user from the current session will be used"
        schema:
          type: "object"
          properties:
            user:
              type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: '#/definitions/TaskInfo'
        401:
          description: 'Unauthorized'
        409:
          description: "Task already done"
        500:
          description: "Internal Server error"
  /task:
    get:
      description: "Get all tasks. Limited to the flatid from the current session"
      parameters:
        - in: "query"
          name: "done"
          description: "Set to true or false to filter the result."
          type: "string"
      responses:
        200:
          description: "Ok"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Task'
        401:
          description: "Unauthorized"
        500:
          description: "Internal Server Error"
    post:
      description: "Create a task. The flatid from the current session will be used."
      parameters:
      - in: "body"
        name: "body"
        description: "Contains all attributes of the task. If an attribute is missing, it will not be changed."
        schema:
          $ref: '#/definitions/Task'
      responses:
        200:
          description: "Task created"
        401:
          description: "Unauthorized"
        400:
          description: "Bad Request"
        500:
          description: "Internal Server Error"
  /task/{taskid}:
    get:
      description: "Get a task by id"
      parameters:
      - in: "path"
        name: "taskid"
        type: "string"
        required: true
        description: "The ID of the flat"
      responses:
        200:
          description: "Found task"
          schema:
            $ref: '#/definitions/Task'
        400:
          description: "Bad request"
        401:
          description: "Unauthorized"
    delete:
      description: "Deletes a task of this flat"
      parameters:
      - in: "path"
        name: "taskid"
        type: "string"
        required: true
        description: "The ID of the task"
      responses:
        200:
          description: "Task deleted"
        401:
          description: "Unauthorized"
definitions:
  User:
    type: "object"
    properties:
      username:
        type: "string"
      email:
        type: "string"
      _id:
        type: "string"
      profile_image:
        type: "string"
      flat:
        type: "string"
      points:
        type: "integer"
  Flat:
    type: "object"
    properties:
      name:
        type: "string"
      id:
        type: "string"
      members:
        type: "array"
        items:
          properties:
            id:
              type: "string"
            isAdmin:
              type: "boolean"
      tasks:
        type: "array"
        items:
          properties:
            id:
              type: "string"
      image:
        type: "string"
      description:
        type: "string"
  Task:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      points:
        type: "integer"
      lastdoneDate:
        type: "string"
        format: "date-time"
        # null if never done
      lastdoneUser:
        type: "string"
        # null if never done
      duedate:
        type: "string"
        format: "date-time"
      frequency:
        type: "integer"
        # -1 = irregular task
      frequencyType:
        type: "integer"
        # 0 = days
        # 1 = weeks
        # 2 = months
      graceDays:
        type: "integer"
      flat:
        type: "string"
      icon:
        type: "string"
  TaskInfo:
    type: "object"
    properties:
      done:
        type: "string"
        format: "date-time"
      user:
        type: "string"
      task:
        type: "string"
  UserInFlat:
    type: "object"
    properties:
      isAdmin:
        type: "boolean"
  #reference icon images